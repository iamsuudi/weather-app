{"version":3,"file":"393.6d142127d8b90b418ece.js","mappings":"gIAqGA,QA1DAA,eAA0BC,GACtB,MAEMC,EAAM,iDAAHC,OAFM,GAEoD,OAAAA,OAAMF,EAAI,YAEvEG,QAAiBC,MAAMH,EAAK,CAAEI,KAAM,SAEpCC,EAAWC,SAASC,cAAc,oBAClCC,EAAWF,SAASC,cAAc,gBAClCE,EAAWH,SAASC,cAAc,oBAExC,GAAwB,MAApBL,EAASQ,OA2CT,OAPKL,EAASM,UAAUC,SAAS,WAC7BP,EAASM,UAAUE,IAAI,UACtBL,EAASG,UAAUC,SAAS,WAC7BJ,EAASG,UAAUE,IAAI,UACtBJ,EAASE,UAAUC,SAAS,WAC7BH,EAASE,UAAUE,IAAI,UAEpB,GA3CkB,CACzB,MAAMC,QAAeZ,EAASa,OAC9BC,QAAQC,IAAIH,GAEZ,MAAM,SAAEI,EAAQ,QAAEC,GAAYL,GAExB,UAAEM,EAAS,QAAEC,GAAYH,GAEzB,UAAEI,GAAcH,GAEhB,KAAEI,EAAI,KAAEC,GAASF,GAEjB,SACFG,EAAQ,YACRC,EAAW,SACXC,EAAQ,UACRC,EAAS,SACTC,EAAQ,MACRC,EAAK,GACLC,EAAE,OACFC,GACAb,GA3EZ,SAA8Ba,EAAQR,EAAMD,EAAMH,EAAWrB,EAAMsB,GAC/D,MAAMY,EAAO3B,SAASC,cAAc,aAC9B2B,EAAa5B,SAASC,cAAc,SACpCW,EAAWZ,SAASC,cAAc,cAClC4B,EAAc7B,SAASC,cAAc,SACrCe,EAAYhB,SAASC,cAAc,UAEnC6B,EAAOhB,EAAUiB,MAAM,KAAKC,MAAMD,MAAM,KACxCE,GACDH,EAAK,GAAK,GAAE,GAAAnC,OACJmC,EAAKI,KAAK,KAAI,UAAAvC,QACbmC,EAAK,GAAK,GAAE,KAAAnC,OAAImC,EAAK,GAAE,OAErCH,EAAKQ,YAAcT,EACnBE,EAAWQ,MAAMC,gBAAkB,OAAH1C,OAAUsB,EAAI,KAC9CW,EAAWQ,MAAME,eAAiB,QAClC1B,EAASuB,YAAc,GAAHxC,OAAMF,EAAI,MAAAE,OAAKoB,GACnCc,EAAYM,YAAcF,EAC1BjB,EAAUmB,YAAcjB,CAC5B,CA0DQqB,CAAqBb,EAAQR,EAAMD,EAAMH,EAAWrB,EAAMsB,GAxDlE,SAA2BI,EAAUC,EAAaC,GAC9C,MAAMmB,EAAYxC,SAASC,cAAc,iBACnCwC,EAAazC,SAASC,cAAc,oBACpCyC,EAAgB1C,SAASC,cAAc,iBAE7CuC,EAAUL,YAAchB,EACxBsB,EAAWN,YAAcf,EACzBsB,EAAcP,YAAcd,CAChC,CAiDQsB,CAAkBxB,EAAUC,EAAaC,GA/CjD,SAAwBC,EAAWsB,EAAMC,EAAKC,GAC1C,MAAMC,EAAgB/C,SAASC,cAAc,kBACvCsB,EAAWvB,SAASC,cAAc,iBAClCuB,EAAQxB,SAASC,cAAc,cAC/BwB,EAAKzB,SAASC,cAAc,WAElC8C,EAAcZ,YAAcb,EAC5BC,EAASY,YAAcS,EACvBpB,EAAMW,YAAcU,EACpBpB,EAAGU,YAAcW,CACrB,CAsCQE,CAAe1B,EAAWC,EAAUC,EAAOC,GAEvC1B,EAASM,UAAUC,SAAS,WAC5BP,EAASM,UAAU4C,OAAO,UAC1B/C,EAASG,UAAUC,SAAS,WAC5BJ,EAASG,UAAU4C,OAAO,UAC1B9C,EAASE,UAAUC,SAAS,WAC5BH,EAASE,UAAU4C,OAAO,SAElC,CAWJ,C","sources":["webpack://template/./src/js/functions.js"],"sourcesContent":["function renderCurrentWeather(temp_c, text, icon, localtime, city, country) {\n    const temp = document.querySelector('span.temp');\n    const weatheIcon = document.querySelector('.icon');\n    const location = document.querySelector('p.location');\n    const currentTime = document.querySelector('.time');\n    const condition = document.querySelector('p.text');\n\n    const time = localtime.split(' ').pop().split(':');\n    const timeLocal =\n        +time[0] < 12\n            ? `${time.join(':')} AM`\n            : `${+time[0] - 12}:${time[1]} PM`;\n\n    temp.textContent = temp_c;\n    weatheIcon.style.backgroundImage = `url(${icon})`;\n    weatheIcon.style.backgroundSize = `cover`;\n    location.textContent = `${city}, ${country}`;\n    currentTime.textContent = timeLocal;\n    condition.textContent = text;\n}\n\nfunction renderCurrentWind(wind_kph, wind_degree, wind_dir) {\n    const windSpeed = document.querySelector('span.wind_kph');\n    const windDegree = document.querySelector('span.wind_degree');\n    const windDirection = document.querySelector('span.wind_dir');\n\n    windSpeed.textContent = wind_kph;\n    windDegree.textContent = wind_degree;\n    windDirection.textContent = wind_dir;\n}\n\nfunction renderHumidity(precip_mm, humi, clo, u) {\n    const precipitation = document.querySelector('span.precip_mm');\n    const humidity = document.querySelector('span.humidity');\n    const cloud = document.querySelector('span.cloud');\n    const uv = document.querySelector('span.uv');\n\n    precipitation.textContent = precip_mm;\n    humidity.textContent = humi;\n    cloud.textContent = clo;\n    uv.textContent = u;\n}\n\nasync function getWeather(city) {\n    const apiKey = '';\n\n    const url = `http://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city}&aqi=yes`;\n\n    const response = await fetch(url, { mode: 'cors' });\n\n    const section1 = document.querySelector('section.location');\n    const section2 = document.querySelector('section.wind');\n    const section3 = document.querySelector('section.humidity');\n\n    if (response.status === 200) {\n        const parsed = await response.json();\n        console.log(parsed);\n\n        const { location, current } = parsed;\n\n        const { localtime, country } = location;\n\n        const { condition } = current;\n\n        const { icon, text } = condition;\n\n        const {\n            wind_kph,\n            wind_degree,\n            wind_dir,\n            precip_mm,\n            humidity,\n            cloud,\n            uv,\n            temp_c,\n        } = current;\n\n        renderCurrentWeather(temp_c, text, icon, localtime, city, country);\n        renderCurrentWind(wind_kph, wind_degree, wind_dir);\n        renderHumidity(precip_mm, humidity, cloud, uv);\n\n        if (section1.classList.contains('hidden'))\n            section1.classList.remove('hidden');\n        if (section2.classList.contains('hidden'))\n            section2.classList.remove('hidden');\n        if (section3.classList.contains('hidden'))\n            section3.classList.remove('hidden');\n\n    } else {\n\n        if (!section1.classList.contains('hidden'))\n            section1.classList.add('hidden');\n        if (!section2.classList.contains('hidden'))\n            section2.classList.add('hidden');\n        if (!section3.classList.contains('hidden'))\n            section3.classList.add('hidden');\n\n        return '';\n    }\n}\n\nexport default getWeather;\n"],"names":["async","city","url","concat","response","fetch","mode","section1","document","querySelector","section2","section3","status","classList","contains","add","parsed","json","console","log","location","current","localtime","country","condition","icon","text","wind_kph","wind_degree","wind_dir","precip_mm","humidity","cloud","uv","temp_c","temp","weatheIcon","currentTime","time","split","pop","timeLocal","join","textContent","style","backgroundImage","backgroundSize","renderCurrentWeather","windSpeed","windDegree","windDirection","renderCurrentWind","humi","clo","u","precipitation","renderHumidity","remove"],"sourceRoot":""}